#############################################################################
#                               Author                                      #
#                           Priyansu Tank                                   #
#                     priyansutank3044@gmail.com                            #
#                Vishwakarma Govt. Engg. College, GTU                       #
#                           2021 | python                                   #
#                                                                           #
# This program converts a comma delimited (.csv) file containing coordinates#
# of points for contour of a supersonic nozzle generated by MOC to a        #
# blockMeshDict file for direct using in openFoam for further CFD analysis. #
# The geometry is taken as 2D symmetric.                                    #
# The boundary conditions are:                                              #
#                                                                           #
#       nozzle-->  .--'|                  _ _ back                          #
#              .--'    |                   /                                #
#            .'        |                  /                                 #
#   inlet-->|          | <--outlet       /                                  #
#           |__________|                /                                   #
#               bottom                _/_ front                             #
#############################################################################

import numpy as np

############# PROBLEM PAERAMETERS ################
t = 0.05        #THICKNESS  [m]

f = open("points.csv", "r")

lines = sum(1 for line in f)
f = open("points.csv", "r")
# print(lines)
xx = np.zeros(lines)
yy = np.zeros(lines)
zz = np.zeros(lines)
x = np.zeros(lines)
y = np.zeros(lines)
z = np.zeros(lines)

j = 0
for i in f:
    point = i.split(",")
    xx[j] = float(point[0])
    yy[j] = float(point[1])
    zz[j] = float(point[2].rstrip())
    # print(x[j], y[j], z[j])
    j = j+1
x = np.flip(xx)
y = np.flip(yy)
z = np.flip(zz)
x = np.insert(x, 0, 0)
y = np.insert(y, 0, 0)
z = np.insert(z, 0, 0)
x = np.insert(x, 1, max(x))
y = np.insert(y, 1, 0)
z = np.insert(z, 1, 0)

x = np.append(x, 0)
y = np.append(y, 0)
z = np.append(z, t)
x = np.append(x, max(x))
y = np.append(y, 0)
z = np.append(z, t)
x = np.append(x, np.flip(xx))
y = np.append(y, np.flip(yy))
for i in range(0, len(zz)):
    z = np.append(z, t)
# print(x)
# print(max(x))
f.close()
f.close()

v = open("blockMeshDict", "w")

v.write("/*--------------------------------*- C++ -*----------------------------------*\\" + "\n")
v.write("| =========                 |                                                 |" + "\n")
v.write("| \\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |" + "\n")
v.write("|  \\\\    /   O peration     | Version:  2.1.1                                 |" + "\n")
v.write("|   \\\\  /    A nd           | Web:      www.OpenFOAM.org                      |" + "\n")
v.write("|    \\\\/     M anipulation  |                                                 |" + "\n")
v.write("\\*---------------------------------------------------------------------------*/" + "\n")
v.write("FoamFile" + "\n")
v.write("{" + "\n")
v.write("    version     2.0;" + "\n")
v.write("    format      ascii;" + "\n")
v.write("    class       dictionary;" + "\n")
v.write("    object      blockMeshDict;" + "\n")
v.write("}" + "\n")
v.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //" + "\n\n")

v.write("convertToMeters 1;" + "\n\n")
v.write("vertices" + "\n")
v.write("(" + "\n")
v.write("   (0 0 0)" + "\n")
v.write("   (" + str(max(xx)) + " 0 0)" + "\n")
v.write("   (" + str(max(xx)) + " " + str(max(yy)) + " 0)" + "\n")
v.write("   (0 " + str(min(yy)) + " 0)" + "\n")
v.write("   (0 0 " + str(t) + ")" + "\n")
v.write("   (" + str(max(xx)) + " 0 " + str(t) + ")" + "\n")
v.write("   (" + str(max(xx)) + " " + str(max(yy)) + " " + str(t) + ")\n")
v.write("   (0 " + str(min(yy)) + " " + str(t) + ")\n")
# for i in range(0, len(x)):
#   v.write("   (" + str(x[i]) + " " + str(y[i]) + " " + str(z[i]) + ")\n")
v.write(");" + "\n\n")

v.write("blocks\n")
v.write("(\n")
v.write("   hex (0 1 2 3 4 5 6 7) (120 40 1) simpleGrading (1 0.25 1)\n")
v.write(");\n\n")

v.write("edges\n")
v.write("(\n")
v.write("   polyLine 3 2\n")
v.write("   (\n")
for i in range(0,len(xx)):
    v.write("       (" + str(xx[i]) + " " + str(yy[i]) + " 0)\n")
v.write("   )\n\n")

v.write("   polyLine 7 6\n")
v.write("   (\n")
for i in range(0,len(xx)):
    v.write("       (" + str(xx[i]) + " " + str(yy[i]) + " " + str(t) + ")\n")
v.write("   )\n\n")
v.write(");\n\n")

v.write("boundary\n")
v.write("(\n")

v.write("   inlet\n")
v.write("   {\n")
v.write("       type patch;\n")
v.write("       faces\n")
v.write("       (\n")
v.write("           (0 4 7 3)\n")
v.write("       );\n")
v.write("   }\n\n")

v.write("   outlet\n")
v.write("   {\n")
v.write("       type patch;\n")
v.write("       faces\n")
v.write("       (\n")
v.write("           (1 5 6 2)\n")
v.write("       );\n")
v.write("   }\n\n")

v.write("   bottom\n")
v.write("   {\n")
v.write("       type symmetryPlane;\n")
v.write("       faces\n")
v.write("       (\n")
v.write("           (0 4 5 1)\n")
v.write("       );\n")
v.write("   }\n\n")

v.write("   nozzle\n")
v.write("   {\n")
v.write("       type wall;\n")
v.write("       faces\n")
v.write("       (\n")
v.write("           (3 7 6 2)\n")
v.write("       );\n")
v.write("   }\n")

v.write("   front\n")
v.write("   {\n")
v.write("       type wall;\n")
v.write("       faces\n")
v.write("       (\n")
v.write("           (4 5 6 7)\n")
v.write("       );\n")
v.write("   }\n")

v.write("   back\n")
v.write("   {\n")
v.write("       type wall;\n")
v.write("       faces\n")
v.write("       (\n")
v.write("           (0 1 2 3)\n")
v.write("       );\n")
v.write("   }\n")

v.write(");\n\n")

v.write("mergePatchPairs\n")
v.write("(\n")
v.write(");\n\n")

v.write("// ************************************************************************* //")

v.close()
